{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/nextjs-meetup-app/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"; // our-domain.com/meetupId\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n/*\n    getStaticPaths() is needed if the page component is dynamic and\n    getStaticProps() is used to fetch the data in pre-rendering page.\n\n    It is so because, getStaticProps() generates the data while build and\n    when its building a pre-generated  data, it needs to know to what all paths the data has to be generated\n\n    Also, fallback prop needs to be provided in the return of getStaticPaths().\n    fallback: false => you provided all the paths and if some path in url which is not matched will give 404 error\n    fallback: true => all the given paths will be resolved on serverSide\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/nextjs-meetup-app/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,uCAAzB,C,CAEA;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CATD;;KAAMN,a;;AAqDN,eAAeA,aAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\n// our-domain.com/meetupId\n\nconst MeetupDetails = (props) => {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://admin:NbVW3L4hufySkD6A@cluster0.fhngv.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupsCollections = db.collection(\"meetups\");\n  const meetups = await meetupsCollections.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n};\n\nexport const getStaticProps = async (context) => {\n  // fetch data for single meetup\n\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\n    \"mongodb+srv://admin:NbVW3L4hufySkD6A@cluster0.fhngv.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupsCollections = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollections.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: { \n        id: selectedMeetup._id.toString() \n      },\n    },\n  };\n};\n\nexport default MeetupDetails;\n\n/*\n    getStaticPaths() is needed if the page component is dynamic and\n    getStaticProps() is used to fetch the data in pre-rendering page.\n\n    It is so because, getStaticProps() generates the data while build and\n    when its building a pre-generated  data, it needs to know to what all paths the data has to be generated\n\n    Also, fallback prop needs to be provided in the return of getStaticPaths().\n    fallback: false => you provided all the paths and if some path in url which is not matched will give 404 error\n    fallback: true => all the given paths will be resolved on serverSide\n*/\n"]},"metadata":{},"sourceType":"module"}