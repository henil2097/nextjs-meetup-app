{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/nextjs-meetup-app/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"; // our-domain.com/meetupId\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"\",\n    title: \"First Meetup\",\n    description: \"Meetup description\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n/*\n    getStaticPaths() is needed if the page component is dynamic and\n    getStaticProps() is used to fetch the data in pre-rendering page.\n\n    It is so because, getStaticProps() generates the data while build and\n    when its building a pre-generated  data, it needs to know to what all paths the data has to be generated\n\n    Also, fallback prop needs to be provided in the return of getStaticPaths().\n    fallback: false => you provided all the paths and if some path in url which is not matched will give 404 error\n    fallback: true => all the given paths will be resolved on serverSide\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/nextjs-meetup-app/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MeetupDetails","props"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB,C,CAEA;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,EADR;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CARD;;KAAMD,a;;AAgDN,eAAeA,aAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\n// our-domain.com/meetupId\n\nconst MeetupDetails = (props) => {\n  return (\n    <MeetupDetail\n      image=\"\"\n      title=\"First Meetup\"\n      description=\"Meetup description\"\n    />\n  );\n};\n\nexport const getStaticPaths = async () => {\n  return {\n    fallback: false,\n    paths: [\n      {\n        params: {\n          meetupId: \"m1\",\n        },\n      },\n      {\n        params: {\n          meetupId: \"m2\",\n        },\n      },\n    ],\n  };\n};\n\nexport const getStaticProps = async (context) => {\n  // fetch data for single meetup\n\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n\n  return {\n    props: {\n      meetupData: {\n        image:\n          \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n        id: \"m1\",\n        title: \"First Meetup\",\n        address: \"Some Street 5, Some city\",\n        description: \"This is a first meetup\",\n      },\n    },\n  };\n};\n\nexport default MeetupDetails;\n\n/*\n    getStaticPaths() is needed if the page component is dynamic and\n    getStaticProps() is used to fetch the data in pre-rendering page.\n\n    It is so because, getStaticProps() generates the data while build and\n    when its building a pre-generated  data, it needs to know to what all paths the data has to be generated\n\n    Also, fallback prop needs to be provided in the return of getStaticPaths().\n    fallback: false => you provided all the paths and if some path in url which is not matched will give 404 error\n    fallback: true => all the given paths will be resolved on serverSide\n*/\n"]},"metadata":{},"sourceType":"module"}